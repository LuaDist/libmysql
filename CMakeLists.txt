# Copyright (C) 2006 MySQL AB
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

cmake_minimum_required ( VERSION 2.8.0 )
if ( COMMAND CMAKE_POLICY )
  cmake_policy ( SET CMP0003 NEW )
endif ( COMMAND CMAKE_POLICY )

project ( libmysql C CXX )
include ( cmake/dist.cmake )

# On cygwin the SSL support is broken
if ( CYGWIN )
  set ( SKIP_SSL 1 )
endif ( )

# # fix CMAKE_INSTALL_PREFIX if set by default
# IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
# SET(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/mysql"
# CACHE PATH "Connector/C install prefix" FORCE)
# ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

if ( NOT CMAKE_BUILD_TYPE )
  set ( CMAKE_BUILD_TYPE "Release" )
endif ( NOT CMAKE_BUILD_TYPE )

# This reads user configuration, generated by configure.js.
if ( WIN32 AND EXISTS ${CMAKE_SOURCE_DIR}/win/configure.data )
  include ( ${CMAKE_SOURCE_DIR}/win/configure.data )
endif ( WIN32 AND EXISTS ${CMAKE_SOURCE_DIR}/win/configure.data )

if ( CMAKE_COMPILER_IS_GNUCXX )
  set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall" )
  set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fno-rtti -fno-exceptions" )
  set ( CMAKE_CXX_COMPILER "${CMAKE_C_COMPILER}" CACHE INTERNAL "C++ Compiler" FORCE )
endif ( CMAKE_COMPILER_IS_GNUCXX )

set ( PROTOCOL_VERSION "10" )
set ( SHARED_LIB_VERSION "16.0.0" )

# This roughly corresponds to the MySQL server version we work with
set ( CONNECTOR_C_MAJOR "6" )
set ( CONNECTOR_C_MINOR "0" )
set ( CONNECTOR_C_PATCH "2" )
set ( CONNECTOR_C_LEVEL "" )

# XXX: these need to go away -- we're not the server.
set ( MYSQL_SERVER_VERSION "6.0.0" )
set ( MYSQL_VERSION_ID "60000" )

set ( CONNECTOR_C_NUMERIC_VERSION "${CONNECTOR_C_MAJOR}.${CONNECTOR_C_MINOR}.${CONNECTOR_C_PATCH}" )
set ( CONNECTOR_C_VERSION "${CONNECTOR_C_NUMERIC_VERSION}${CONNECTOR_C_LEVEL}" )

if ( WIN32 )
  file ( WRITE "${CMAKE_SOURCE_DIR}/win/version.cmake" "SET(CONNECTOR_PRODUCT_VERSION ${CONNECTOR_C_NUMERIC_VERSION}) SET(CONNECTOR_PRODUCT_LEVEL ${CONNECTOR_C_LEVEL})" )
endif ( WIN32 )

set ( MYSQL_TCP_PORT_DEFAULT "3306" )
if ( NOT MYSQL_TCP_PORT )
  set ( MYSQL_TCP_PORT ${MYSQL_TCP_PORT_DEFAULT} )
  set ( MYSQL_TCP_PORT_DEFAULT "0" )
endif ( NOT MYSQL_TCP_PORT )
if ( NOT MYSQL_UNIX_ADDR )
  set ( MYSQL_UNIX_ADDR "/tmp/mysql.sock" )
endif ( NOT MYSQL_UNIX_ADDR )
if ( NOT COMPILATION_COMMENT )
  set ( COMPILATION_COMMENT "Source distribution" )
endif ( NOT COMPILATION_COMMENT )

configure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/include/mysql_version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/mysql_version.h 
  @ONLY )

if ( NOT SKIP_SSL AND NOT WITH_OPENSSL )
  add_definitions ( -DHAVE_YASSL -DYASSL_PURE_C -DHAVE_OPENSSL )
endif ( NOT SKIP_SSL AND NOT WITH_OPENSSL )

# Set debug options
set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DFORCE_INIT_OF_VARS" )

# Do not use SAFEMALLOC for Windows builds, as Debug CRT has the same
# functionality Neither SAFE_MUTEX works on Windows and it has been
# explicitely undefined in my_pthread.h
if ( NOT WIN32 )
  set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DSAFEMALLOC -DSAFE_MUTEX" )
  set ( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DSAFEMALLOC -DSAFE_MUTEX" )
endif ( NOT WIN32 )

set ( localstatedir "C:\\mysql\\data" )

if ( __NT__ )
  add_definitions ( -D__NT__ )
endif ( __NT__ )
if ( CYBOZU )
  add_definitions ( -DCYBOZU )
endif ( CYBOZU )

if ( EXTRA_DEBUG )
  add_definitions ( -D EXTRA_DEBUG )
endif ( EXTRA_DEBUG )

if ( ENABLED_DEBUG_SYNC )
  add_definitions ( -D ENABLED_DEBUG_SYNC )
endif ( ENABLED_DEBUG_SYNC )
set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLED_DEBUG_SYNC" )
set ( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLED_DEBUG_SYNC" )

if ( BACKUP_TEST )
  add_definitions ( -D BACKUP_TEST )
endif ( BACKUP_TEST )

# in some places we use DBUG_OFF
set ( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DDBUG_OFF" )
set ( CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DDBUG_OFF" )
set ( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DDBUG_OFF" )
set ( CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -DDBUG_OFF" )

# enable debug info also in Release build, and create PDB to be able to analyze crashes
if ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )
  set ( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi" )
  set ( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi" )
  set ( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /debug" )
endif ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )

if ( CMAKE_GENERATOR MATCHES "Visual Studio 7" )
  # VS2003 needs the /Op compiler option to disable floating point
  # optimizations
  set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Op" )
  set ( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Op" )
  set ( CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Op" )
  set ( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Op" )
  set ( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Op" )
  set ( CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /Op" )
endif ( CMAKE_GENERATOR MATCHES "Visual Studio 7" )

#TODO: update the code and remove the disabled warnings
if ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )
  set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4800 /wd4805" )
  set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4800 /wd4805" )
endif ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )

# Disable warnings in Visual Studio 8 and above
if ( MSVC AND NOT CMAKE_GENERATOR MATCHES "Visual Studio 7" )
  set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /wd4996" )
  set ( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /wd4996" )
  set ( CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /wd4996" )
  set ( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /wd4996" )
  set ( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /wd4996" )
  set ( CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /wd4996" )
endif ( MSVC AND NOT CMAKE_GENERATOR MATCHES "Visual Studio 7" )

# Settings for Visual Studio 7 and above.  
if ( MSVC )
  # replace /MDd with /MTd
  string ( REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE} )
  string ( REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO} )
  string ( REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG} )
  string ( REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG_INIT ${CMAKE_C_FLAGS_DEBUG_INIT} )

  string ( REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} )
  string ( REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO} )
  string ( REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} )
  string ( REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG_INIT ${CMAKE_CXX_FLAGS_DEBUG_INIT} )

  # generate map files, set stack size (see bug#20815)
  set ( thread_stack_size 1048576 )
  set ( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:${thread_stack_size}" )
  add_definitions ( -DPTHREAD_STACK_MIN=${thread_stack_size} )

  # remove support for Exception handling
  string ( REPLACE "/GX" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} )
  string ( REPLACE "/EHsc" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} )
  string ( REPLACE "/EHsc" "" CMAKE_CXX_FLAGS_INIT ${CMAKE_CXX_FLAGS_INIT} )
  string ( REPLACE "/EHsc" "" CMAKE_CXX_FLAGS_DEBUG_INIT ${CMAKE_CXX_FLAGS_DEBUG_INIT} )
  # Mark 32 bit executables large address aware so they can 
  # use > 2GB address space
  if ( CMAKE_SIZEOF_VOID_P MATCHES 4 )
    set ( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE" )
  endif ( CMAKE_SIZEOF_VOID_P MATCHES 4 )
  # Disable automatic manifest generation.
  string ( REPLACE "/MANIFEST" "/MANIFEST:NO" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} )
  # Explicitly disable it since it is the default for newer versions of VS
  string ( REGEX MATCH "MANIFEST:NO" tmp_manifest ${CMAKE_EXE_LINKER_FLAGS} )
  if ( NOT tmp_manifest )
    set ( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO" )
  endif ( NOT tmp_manifest )
endif ( MSVC )

if ( WIN32 )
  add_definitions ( "-D_WINDOWS -D__WIN__ -D_CRT_SECURE_NO_DEPRECATE" )
endif ( WIN32 )

# This definition is necessary to work around a bug with Intellisense
# described here: http://tinyurl.com/2cb428.  Syntax highlighting is important
# for proper debugger functionality.
if ( WIN32 AND CMAKE_SIZEOF_VOID_P MATCHES 8 )
  message ( STATUS "Detected 64-bit platform." )
  add_definitions ( "-D_WIN64" )
endif ( WIN32 AND CMAKE_SIZEOF_VOID_P MATCHES 8 )

if ( EMBED_MANIFESTS )
  # Search for the tools (mt, makecat, signtool) necessary for embedding
  # manifests and signing executables with the MySQL AB authenticode cert.
  #
  # CMake will first search it's defaults (CMAKE_FRAMEWORK_PATH, 
  # CMAKE_APPBUNDLE_PATH, CMAKE_PROGRAM_PATH and the system PATH) followed 
  # by the listed paths which are the current possible defaults and should be
  # updated when necessary.  
  # 
  # The custom manifests are designed to be compatible with all mt versions.
  # The MySQL AB Authenticode certificate is available only internally.  
  # Others should store a single signing certificate in a local cryptographic
  # service provider and alter the signtool command as necessary.
  find_program ( HAVE_MANIFEST_TOOL NAMES mt PATHS "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/VC/bin" 
    "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/Common7/Tools/Bin" "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/SDK/v2.0/Bin" )
  find_program ( HAVE_CATALOG_TOOL NAMES makecat PATHS "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/Common7/Tools/Bin" )
  find_program ( HAVE_SIGN_TOOL NAMES signtool PATHS "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/Common7/Tools/Bin" 
    "$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/SDK/v2.0/Bin" )

  if ( HAVE_MANIFEST_TOOL )
    message ( STATUS "Found Mainfest Tool." )
  else ( HAVE_MANIFEST_TOOL )
    message ( FATAL_ERROR "Manifest tool, mt.exe, can't be found." )
  endif ( HAVE_MANIFEST_TOOL )
  if ( HAVE_CATALOG_TOOL )
    message ( STATUS "Found Catalog Tool." )
  else ( HAVE_CATALOG_TOOL )
    message ( FATAL_ERROR "Catalog tool, makecat.exe, can't be found." )
  endif ( HAVE_CATALOG_TOOL )
  if ( HAVE_SIGN_TOOL )
    message ( STATUS "Found Sign Tool. Embedding custom manifests and signing executables." )
  else ( HAVE_SIGN_TOOL )
    message ( FATAL_ERROR "Sign tool, signtool.exe, can't be found." )
  endif ( HAVE_SIGN_TOOL )

  # Set the processor architecture.
  if ( CMAKE_GENERATOR MATCHES "Visual Studio 8 2005 Win64" )
    set ( PROCESSOR_ARCH "amd64" )
  else ( CMAKE_GENERATOR MATCHES "Visual Studio 8 2005 Win64" )
    set ( PROCESSOR_ARCH "X86" )
  endif ( CMAKE_GENERATOR MATCHES "Visual Studio 8 2005 Win64" )
endif ( EMBED_MANIFESTS )

if ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )
  set ( SHAREDIR "share" )
  # XXX is this still a useful default?
  set ( DEFAULT_CHARSET_HOME "C:/mysql/" )
else ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )
  set ( SHAREDIR "${CMAKE_INSTALL_PREFIX}/share/mysql" )
  set ( DEFAULT_CHARSET_HOME "${CMAKE_INSTALL_PREFIX}" )
endif ( WIN32 AND NOT CMAKE_GENERATOR MATCHES "MSYS" AND NOT CMAKE_GENERATOR MATCHES 
  "MinGW" AND NOT CMAKE_GENERATOR MATCHES "Cygwin" AND NOT CMAKE_GENERATOR MATCHES 
  "Unix" )

if ( WIN32 AND ( CMAKE_GENERATOR MATCHES "MSYS" OR CMAKE_GENERATOR MATCHES "MinGW" 
  ) )
  set ( WIN32_ADD_LIBRARIES "ws2_32" )
else ( WIN32 AND ( CMAKE_GENERATOR MATCHES "MSYS" OR CMAKE_GENERATOR MATCHES "MinGW" 
  ) )
  set ( WIN32_ADD_LIBRARIES "" )
endif ( WIN32 AND ( CMAKE_GENERATOR MATCHES "MSYS" OR CMAKE_GENERATOR MATCHES "MinGW" 
  ) )

include ( configure )
configure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/include/my_config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/my_config.h )

if ( HAVE_SSIZE_T )
  add_definitions ( -DHAVE_SSIZE_T )
endif ( )
add_subdirectory ( vio )
add_subdirectory ( extlib/dbug )
add_subdirectory ( strings )
add_subdirectory ( extlib/regex )
if ( WITH_EXTERNAL_ZLIB )
  include ( FindZLIB )
  if ( ZLIB_FOUND )
    include_directories ( ${ZLIB_INCLUDE_DIR} )
  else ( ZLIB_FOUND )
    message ( FATAL_ERROR "Unable to find external Zlib library and headers." )
  endif ( ZLIB_FOUND )
else ( WITH_EXTERNAL_ZLIB )
  set ( ZLIB_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/extlib/zlib" )
  add_subdirectory ( extlib/zlib )
endif ( WITH_EXTERNAL_ZLIB )
add_definitions ( -D HAVE_COMPRESS )

add_subdirectory ( mysys )
if ( NOT SKIP_SSL )
  if ( NOT WITH_OPENSSL )
    add_subdirectory ( extlib/yassl )
    add_subdirectory ( extlib/yassl/taocrypt )
  else ( NOT WITH_OPENSSL )
    include ( FindOpenSSL )
    if ( OPENSSL_FOUND )
      include_directories ( ${OPENSSL_INCLUDE_DIR} )
      find_library ( OPENSSL_LIBCRYPTO NAMES crypto libeay32 )
      add_definitions ( -DHAVE_OPENSSL )
    else ( OPENSSL_FOUND )
      message ( FATAL_ERROR "Unable to find external OpenSSL library and headers." )
    endif ( OPENSSL_FOUND )
  endif ( NOT WITH_OPENSSL )
endif ( NOT SKIP_SSL )
add_subdirectory ( libmysql )
add_subdirectory ( tests )
add_subdirectory ( unittest/mytap )
add_subdirectory ( unittest/examples )
add_subdirectory ( unittest/libmysql )
add_subdirectory ( unittest/mysys )
add_subdirectory ( mysql_config )

#
# Necessary for 'make test' to work
# 
enable_testing ( )

#
# Installation
#

file ( GLOB HEADERS include/*.h )
install_header ( ${HEADERS} )
#install ( DIRECTORY "include/" DESTINATION ${INSTALL_INC} FILES_MATCHING PATTERN 
#  "*.h" )

# ----------------------------------------------------------------------
# Create package script
# ----------------------------------------------------------------------

if ( NOT CONNECTOR_PLATFORM )
  if ( WIN32 )
    if ( CMAKE_SIZEOF_VOID_P MATCHES 8 )
      set ( CONNECTOR_PLATFORM "winx64" )
    else ( CMAKE_SIZEOF_VOID_P MATCHES 8 )
      set ( CONNECTOR_PLATFORM "win32" )
    endif ( CMAKE_SIZEOF_VOID_P MATCHES 8 )
  else ( WIN32 )
    set ( CONNECTOR_PLATFORM "unknown" )
  endif ( WIN32 )
endif ( NOT CONNECTOR_PLATFORM )

# INCLUDE(InstallRequiredSystemLibraries)

# SET(CPACK_PACKAGE_VERSION_MAJOR ${CONNECTOR_C_MAJOR})
# SET(CPACK_PACKAGE_VERSION_MINOR ${CONNECTOR_C_MINOR})
# SET(CPACK_PACKAGE_VERSION_PATCH ${CONNECTOR_C_PATCH})

# IF(NOT EXTRA_NAME_SUFFIX)
# SET(EXTRA_NAME_SUFFIX "")
# ENDIF(NOT EXTRA_NAME_SUFFIX)

# SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Connector/C (libmysql), a library for connecting to MySQL servers.")
# SET(CPACK_PACKAGE_NAME                "mysql-connector-c${EXTRA_NAME_SUFFIX}")
# SET(CPACK_PACKAGE_VENDOR              "Sun Microsystems, Inc.")
# IF(EXISTS "COPYING")
# SET(CPACK_RESOURCE_FILE_LICENSE     "COPYING")
# ELSE(EXISTS "COPYING")
# SET(CPACK_RESOURCE_FILE_LICENSE     "LICENSE.mysql")
# ENDIF(EXISTS "COPYING")
# SET(CPACK_PACKAGE_DESCRIPTION_FILE    "README")
# SET(CPACK_SOURCE_PACKAGE_FILE_NAME    "${CPACK_PACKAGE_NAME}-${CONNECTOR_C_VERSION}")
# SET(CPACK_PACKAGE_INSTALL_DIRECTORY   "${CPACK_PACKAGE_NAME}-${CONNECTOR_C_VERSION}-${CONNECTOR_PLATFORM}")
# IF(WIN32)
# SET(CPACK_GENERATOR                 "ZIP")
# SET(CPACK_PACKAGE_FILE_NAME         "${CPACK_PACKAGE_NAME}-noinstall-${CONNECTOR_C_VERSION}-${CONNECTOR_PLATFORM}")
# ELSE(WIN32)
# SET(CPACK_GENERATOR                 "TGZ")
# SET(CPACK_PACKAGE_FILE_NAME         "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
# ENDIF(WIN32)

install_data ( README COPYING )
